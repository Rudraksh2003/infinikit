{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "SubmitForm",
  "type": "registry:component",
  "title": "SubmitForm",
  "description": "SubmitForm.",
  "files": [
    {
      "path": "registry/Infinikit/SubmitForm/SubmitForm.tsx",
      "content": "import { ChangeEvent, useState } from \"react\";\n\ninterface SubmitFormProps {\n  userID: string;\n  onSubmitSuccess?: (data: any) => void;\n  onSubmitError?: (error: any) => void;\n  apiEndpoint?: string;\n  className?: string;\n  darkMode?: boolean;\n}\n\ninterface FormData {\n  name: string;\n  email: string;\n  message: string;\n}\n\nconst CreativeSubmitForm = ({\n  userID,\n  onSubmitSuccess,\n  onSubmitError,\n  apiEndpoint = \"http://localhost:5000/submit\",\n  className = \"\",\n  darkMode = false\n}: SubmitFormProps) => {\n  const [formData, setFormData] = useState<FormData>({ name: \"\", email: \"\", message: \"\" });\n  const [submitMessage, setSubmitMessage] = useState<string>(\"\");\n  const [isSubmitting, setIsSubmitting] = useState<boolean>(false);\n  const [currentStep, setCurrentStep] = useState<number>(1);\n  const [focused, setFocused] = useState<string>(\"\");\n\n  // Determine color scheme based on darkMode prop\n  const baseColors = darkMode ? {\n    bg: \"bg-gray-900\",\n    cardBg: \"bg-gray-800\",\n    input: \"bg-gray-700\",\n    text: \"text-white\",\n    border: \"border-gray-600\",\n    focusBorder: \"border-purple-500\",\n    muted: \"text-gray-300\"\n  } : {\n    bg: \"bg-gray-100\",\n    cardBg: \"bg-white\",\n    input: \"bg-gray-50\",\n    text: \"text-gray-900\",\n    border: \"border-gray-300\",\n    focusBorder: \"border-purple-500\",\n    muted: \"text-gray-600\"\n  };\n\n  const handleChange = (e: ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n    setSubmitMessage(\"\");\n  };\n\n  const handleFocus = (field: string) => {\n    setFocused(field);\n  };\n\n  const handleBlur = () => {\n    setFocused(\"\");\n  };\n\n  const nextStep = () => {\n    if (currentStep === 1 && !formData.name) {\n      setSubmitMessage(\"Please enter your name\");\n      return;\n    }\n    if (currentStep === 2 && !formData.email) {\n      setSubmitMessage(\"Please enter your email\");\n      return;\n    }\n    setSubmitMessage(\"\");\n    setCurrentStep(currentStep + 1);\n  };\n\n  const prevStep = () => {\n    setCurrentStep(currentStep - 1);\n    setSubmitMessage(\"\");\n  };\n\n  const submitForm = async () => {\n    if (!formData.name || !formData.email || !formData.message) {\n      setSubmitMessage(\"Please fill all fields before submitting\");\n      return;\n    }\n\n    setIsSubmitting(true);\n    setSubmitMessage(\"\");\n\n    try {\n      const response = await fetch(apiEndpoint, {\n        method: \"POST\",\n        headers: { \"Content-Type\": \"application/json\" },\n        body: JSON.stringify({ userID, ...formData }),\n      });\n\n      const data = await response.json();\n      if (data.message) {\n        setSubmitMessage(\"✨ Form submitted successfully! ✨\");\n        setFormData({ name: \"\", email: \"\", message: \"\" });\n        setTimeout(() => {\n          setCurrentStep(1);\n        }, 2000);\n        \n        if (onSubmitSuccess) {\n          onSubmitSuccess(data);\n        }\n      } else {\n        setSubmitMessage(\"Something went wrong. Please try again.\");\n        if (onSubmitError) {\n          onSubmitError(data);\n        }\n      }\n    } catch (error) {\n      setSubmitMessage(\"Connection error. Please check your network.\");\n      if (onSubmitError) {\n        onSubmitError(error);\n      }\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const getProgressWidth = () => {\n    return `${(currentStep / 3) * 100}%`;\n  };\n\n  const renderStepContent = () => {\n    switch (currentStep) {\n      case 1:\n        return (\n          <div className=\"space-y-4\">\n            <h2 className={`text-2xl font-bold mb-6 text-center ${baseColors.text}`}>\n              What's your name?\n            </h2>\n            <div \n              className={`relative transform transition-all duration-300 ${\n                focused === \"name\" ? \"scale-105\" : \"\"\n              }`}\n            >\n              <input\n                type=\"text\"\n                name=\"name\"\n                placeholder=\"Enter your name\"\n                value={formData.name}\n                onChange={handleChange}\n                onFocus={() => handleFocus(\"name\")}\n                onBlur={handleBlur}\n                className={`w-full p-4 rounded-lg ${baseColors.input} border-2 \n                  ${focused === \"name\" ? baseColors.focusBorder : baseColors.border} \n                  ${baseColors.text} text-lg shadow-md outline-none transition-all`}\n              />\n              <div className={`absolute -bottom-1 left-0 w-full h-1 ${darkMode ? \"bg-gray-600\" : \"bg-gray-300\"} rounded-full overflow-hidden`}>\n                <div \n                  className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500 transition-all duration-300\" \n                  style={{ width: formData.name ? \"100%\" : \"0%\" }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        );\n      case 2:\n        return (\n          <div className=\"space-y-4\">\n            <h2 className={`text-2xl font-bold mb-6 text-center ${baseColors.text}`}>\n              What's your email?\n            </h2>\n            <div \n              className={`relative transform transition-all duration-300 ${\n                focused === \"email\" ? \"scale-105\" : \"\"\n              }`}\n            >\n              <input\n                type=\"email\"\n                name=\"email\"\n                placeholder=\"Enter your email\"\n                value={formData.email}\n                onChange={handleChange}\n                onFocus={() => handleFocus(\"email\")}\n                onBlur={handleBlur}\n                className={`w-full p-4 rounded-lg ${baseColors.input} border-2 \n                  ${focused === \"email\" ? baseColors.focusBorder : baseColors.border} \n                  ${baseColors.text} text-lg shadow-md outline-none transition-all`}\n              />\n              <div className={`absolute -bottom-1 left-0 w-full h-1 ${darkMode ? \"bg-gray-600\" : \"bg-gray-300\"} rounded-full overflow-hidden`}>\n                <div \n                  className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500 transition-all duration-300\" \n                  style={{ width: formData.email ? \"100%\" : \"0%\" }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        );\n      case 3:\n        return (\n          <div className=\"space-y-4\">\n            <h2 className={`text-2xl font-bold mb-6 text-center ${baseColors.text}`}>\n              Your message\n            </h2>\n            <div \n              className={`relative transform transition-all duration-300 ${\n                focused === \"message\" ? \"scale-105\" : \"\"\n              }`}\n            >\n              <textarea\n                name=\"message\"\n                placeholder=\"What would you like to tell us?\"\n                value={formData.message}\n                onChange={handleChange}\n                onFocus={() => handleFocus(\"message\")}\n                onBlur={handleBlur}\n                rows={5}\n                className={`w-full p-4 rounded-lg ${baseColors.input} border-2 \n                  ${focused === \"message\" ? baseColors.focusBorder : baseColors.border} \n                  ${baseColors.text} text-lg shadow-md outline-none transition-all resize-none`}\n              />\n              <div className={`absolute -bottom-1 left-0 w-full h-1 ${darkMode ? \"bg-gray-600\" : \"bg-gray-300\"} rounded-full overflow-hidden`}>\n                <div \n                  className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500 transition-all duration-300\" \n                  style={{ width: formData.message ? \"100%\" : \"0%\" }}\n                ></div>\n              </div>\n            </div>\n          </div>\n        );\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div className={`${className} rounded-2xl ${baseColors.cardBg} p-6 shadow-lg border ${darkMode ? \"border-gray-700\" : \"border-gray-200\"} relative overflow-hidden`}>\n      {/* Decorative elements */}\n      <div className=\"absolute -top-20 -right-20 w-40 h-40 bg-purple-500 rounded-full opacity-10\"></div>\n      <div className=\"absolute -bottom-20 -left-20 w-40 h-40 bg-pink-500 rounded-full opacity-10\"></div>\n      \n      {/* Header */}\n      <div className=\"flex items-center justify-center mb-6\">\n        <div className=\"relative\">\n          <div className={`text-2xl font-bold text-transparent bg-clip-text bg-gradient-to-r from-purple-400 to-pink-500`}>\n            {currentStep === 3 ? \"Final Step\" : `Step ${currentStep} of 3`}\n          </div>\n          <div className=\"animate-ping absolute -top-1 -right-1 w-2 h-2 rounded-full bg-pink-400\"></div>\n        </div>\n      </div>\n      \n      {/* Progress bar */}\n      <div className={`w-full h-2 ${darkMode ? \"bg-gray-700\" : \"bg-gray-200\"} rounded-full mb-6 overflow-hidden`}>\n        <div \n          className=\"h-full bg-gradient-to-r from-purple-500 to-pink-500 transition-all duration-500 ease-in-out\"\n          style={{ width: getProgressWidth() }}\n        ></div>\n      </div>\n      \n      {/* Form content */}\n      <div className=\"min-h-64\">\n        {renderStepContent()}\n      </div>\n      \n      {/* Error message */}\n      {submitMessage && (\n        <div className={`mt-4 text-center py-2 px-4 rounded-lg text-sm font-medium ${\n          submitMessage.includes(\"✨\") \n            ? `${darkMode ? \"bg-green-900/30 text-green-300 border border-green-500/50\" : \"bg-green-100 text-green-800 border border-green-200\"}`\n            : `${darkMode ? \"bg-red-900/30 text-red-300 border border-red-500/50\" : \"bg-red-100 text-red-800 border border-red-200\"}`\n        }`}>\n          {submitMessage}\n        </div>\n      )}\n      \n      {/* Navigation buttons */}\n      <div className=\"flex justify-between mt-6\">\n        {currentStep > 1 ? (\n          <button\n            onClick={prevStep}\n            className={`px-5 py-2 rounded-lg ${darkMode ? \"bg-gray-700 hover:bg-gray-600\" : \"bg-gray-200 hover:bg-gray-300\"} transition-all ${baseColors.text} font-medium flex items-center`}\n          >\n            <span className=\"mr-2\">←</span> Back\n          </button>\n        ) : (\n          <div></div>\n        )}\n        \n        {currentStep < 3 ? (\n          <button\n            onClick={nextStep}\n            className=\"px-5 py-2 rounded-lg bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 transition-all text-white font-medium flex items-center\"\n          >\n            Next <span className=\"ml-2\">→</span>\n          </button>\n        ) : (\n          <button\n            onClick={submitForm}\n            disabled={isSubmitting}\n            className=\"px-5 py-2 rounded-lg bg-gradient-to-r from-purple-500 to-pink-500 hover:from-purple-600 hover:to-pink-600 transition-all text-white font-medium flex items-center disabled:opacity-70\"\n          >\n            {isSubmitting ? (\n              <>\n                <svg className=\"animate-spin -ml-1 mr-2 h-4 w-4 text-white\" xmlns=\"http://www.w3.org/2000/svg\" fill=\"none\" viewBox=\"0 0 24 24\">\n                  <circle className=\"opacity-25\" cx=\"12\" cy=\"12\" r=\"10\" stroke=\"currentColor\" strokeWidth=\"4\"></circle>\n                  <path className=\"opacity-75\" fill=\"currentColor\" d=\"M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z\"></path>\n                </svg>\n                Submitting...\n              </>\n            ) : (\n              <>Submit</>\n            )}\n          </button>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default CreativeSubmitForm;\n\n\n/*\n// Example of how to use the CreativeSubmitForm component in your main.js or App.js\n\nimport React from 'react';\nimport CreativeSubmitForm from './CreativeSubmitForm';\n\n// Example App component\nfunction App() {\n  // Handler for successful form submission\n  const handleFormSuccess = (data) => {\n    console.log(\"Form submitted successfully:\", data);\n    // You can perform additional actions here\n  };\n\n  // Handler for form submission errors\n  const handleFormError = (error) => {\n    console.error(\"Form submission error:\", error);\n    // You can handle errors here\n  };\n\n  return (\n    <div className=\"container mx-auto p-4\">\n      <h1 className=\"text-2xl font-bold mb-8 text-center\">My Application</h1>\n      \n      \n      <div className=\"mb-10\">\n        <h2 className=\"text-xl font-bold mb-4\">Light Mode Form</h2>\n        <CreativeSubmitForm \n          userID=\"user123\"\n          darkMode={false}\n          onSubmitSuccess={handleFormSuccess}\n          onSubmitError={handleFormError}\n          className=\"max-w-md mx-auto\"\n          apiEndpoint=\"https://your-api-endpoint.com/submit\"\n        />\n      </div>\n      \n      <div className=\"bg-gray-900 p-6 rounded-lg\">\n        <h2 className=\"text-xl font-bold mb-4 text-white\">Dark Mode Form</h2>\n        <CreativeSubmitForm \n          userID=\"user456\"\n          darkMode={true}\n          onSubmitSuccess={handleFormSuccess}\n          onSubmitError={handleFormError}\n          className=\"max-w-md mx-auto\"\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;*/",
      "type": "registry:component"
    }
  ]
}