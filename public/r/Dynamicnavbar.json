{
  "$schema": "https://ui.shadcn.com/schema/registry-item.json",
  "name": "Dynamicnavbar",
  "type": "registry:component",
  "title": "Dynamicnavbar",
  "description": "An iphone dynamic island",
  "registryDependencies": [
    "Nav"
  ],
  "files": [
    {
      "path": "registry/Infinikit/Dynamicnavbar/Dynamicnavbar.tsx",
      "content": "import { motion } from \"framer-motion\";\nimport React, { ReactNode, useEffect, useState } from \"react\";\n\ninterface NavProps {\n  children: ReactNode;\n  href?: string;\n  onClick?: () => void;\n  className?: string;\n}\n\ninterface ILandNavProps {\n  children: ReactNode;\n  autoCloseTimeout?: number;\n  className?: string;\n  expandedWidth?: string;\n  collapsedWidth?: string;\n  darkModeBackgroundColor?: string;\n  darkModeTextColor?: string;\n  lightModeBackgroundColor?: string;\n  lightModeTextColor?: string;\n  forceDarkMode?: boolean;\n  forceLightMode?: boolean;\n}\n\nexport const Nav: React.FC<NavProps> = ({ \n  children, \n  href = \"#\", \n  onClick,\n  className = \"\"\n}) => {\n  return (\n    <a \n      href={href} \n      onClick={onClick}\n      className={`px-4 py-2 hover:opacity-80 rounded transition-opacity ${className}`}\n    >\n      {children}\n    </a>\n  );\n};\n\nexport const ILandNav: React.FC<ILandNavProps> = ({ \n  children,\n  autoCloseTimeout = 15000,\n  className = \"\",\n  expandedWidth = \"100%\",\n  collapsedWidth = \"100px\",\n  darkModeBackgroundColor = \"bg-gray-900\",\n  darkModeTextColor = \"text-white\",\n  lightModeBackgroundColor = \"bg-white\",\n  lightModeTextColor = \"text-gray-900\",\n  forceDarkMode = false,\n  forceLightMode = false\n}) => {\n  const [isOpen, setIsOpen] = useState(true);\n  const [isDarkMode, setIsDarkMode] = useState(false);\n  let timeoutId: NodeJS.Timeout;\n  \n  // Check system preferences for dark/light mode\n  useEffect(() => {\n    // Skip preference detection if mode is forced\n    if (forceDarkMode || forceLightMode) {\n      setIsDarkMode(forceDarkMode);\n      return;\n    }\n    \n    // Check for system preference\n    if (window.matchMedia) {\n      const darkModeQuery = window.matchMedia('(prefers-color-scheme: dark)');\n      setIsDarkMode(darkModeQuery.matches);\n      \n      // Listen for changes\n      const handleChange = (e: MediaQueryListEvent) => {\n        setIsDarkMode(e.matches);\n      };\n      \n      darkModeQuery.addEventListener('change', handleChange);\n      return () => darkModeQuery.removeEventListener('change', handleChange);\n    }\n  }, [forceDarkMode, forceLightMode]);\n  \n  const openNavbar = () => {\n    setIsOpen(true);\n    resetAutoClose();\n  };\n  \n  const closeNavbar = () => setIsOpen(false);\n  \n  const resetAutoClose = () => {\n    clearTimeout(timeoutId);\n    timeoutId = setTimeout(closeNavbar, autoCloseTimeout);\n  };\n  \n  useEffect(() => {\n    const handleScroll = () => {\n      if (window.scrollY === 0) {\n        setIsOpen(true);\n      } else {\n        closeNavbar();\n      }\n    };\n    \n    window.addEventListener(\"scroll\", handleScroll);\n    resetAutoClose();\n    \n    return () => {\n      window.removeEventListener(\"scroll\", handleScroll);\n      clearTimeout(timeoutId);\n    };\n  }, []);\n  \n  // Set background and text colors based on dark/light mode\n  const backgroundColor = isDarkMode ? darkModeBackgroundColor : lightModeBackgroundColor;\n  const textColor = isDarkMode ? darkModeTextColor : lightModeTextColor;\n  \n  // Additional hover color for nav items based on mode\n  const hoverBgColor = isDarkMode ? \"hover:bg-gray-700\" : \"hover:bg-gray-100\";\n  \n  return (\n    <div className={`fixed top-0 left-0 w-full z-50 flex justify-center p-2 ${className}`}>\n      <motion.div\n        initial={{ width: collapsedWidth }}\n        animate={{ width: isOpen ? expandedWidth : collapsedWidth }}\n        transition={{ duration: 0.3 }}\n        className={`${backgroundColor} ${textColor} p-2 rounded-lg shadow-lg cursor-pointer overflow-hidden transition-colors duration-300`}\n        onClick={openNavbar}\n      >\n        {isOpen ? (\n          <div className=\"flex justify-center gap-4 p-2\">\n            {React.Children.map(children, child => {\n              if (React.isValidElement<NavProps>(child) && child.type === Nav) {\n                return React.cloneElement(child, { \n                  className: `${hoverBgColor} ${child.props.className || ''}`\n                });\n              }\n              return child;\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center\">â˜°</div>\n        )}\n      </motion.div>\n    </div>\n  );\n};\n\n// Example usage:\n//import { ILandNav, Nav } from \"./component/dynamicnavbar/Dynamicnavbar\";\n\n// <ILandNav autoCloseTimeout={10000}>\n//   <Nav href=\"#home\">Home</Nav>\n//   <Nav href=\"#about\">About</Nav>\n//   <Nav href=\"#services\">Services</Nav>\n//   <Nav href=\"#contact\">Contact</Nav>\n// </ILandNav>\n\n// Example with theme control:\n// <ILandNav \n//   forceDarkMode={true} \n//   darkModeBackgroundColor=\"bg-blue-900\"\n//   lightModeBackgroundColor=\"bg-blue-100\"\n// >\n//   <Nav href=\"#home\">Home</Nav>\n//   <Nav href=\"#about\">About</Nav>\n// </ILandNav>",
      "type": "registry:component"
    }
  ]
}